// @version=6
indicator("Volume Alert Indicator", overlay=true)

// =============================================================================
// USER INPUTS
// =============================================================================

// Display Settings
shapeSizeInput = input.string(title = "Plot Shape Size", defval = "auto", options = ["small", "normal", "auto"],
      tooltip = "Controls the size of all plotted shapes on the chart", group = "Display Settings")
enableDebugTable = input.bool(title="Enable Debug Table Display", defval=true, group = "Display Settings")

// Pair Selection
selectedSymbolInput = input.symbol(title="Select Symbol for Volume Analysis", defval="",
      tooltip="Choose the symbol to analyze volume from. Leave empty to use current chart symbol. Signals will appear on current chart based on selected symbol's volume.", group = "Pair Selection")

// Use current symbol if input is empty, otherwise use selected symbol
selectedSymbol = selectedSymbolInput == "" ? syminfo.tickerid : selectedSymbolInput

// Activation Switches
enableNewHighestVolumeSignal = input.bool(title="Enable New Highest Volume Detection", defval=true,
      tooltip="Enable/disable detection and alerts for new highest volume bars", group = "Activation Switches")
enableFollowUpVolumeSignal = input.bool(title="Enable Follow-Up Volume Detection", defval=true,
      tooltip="Enable/disable detection and alerts for follow-up volume bars", group = "Activation Switches")
enableHighVolumeWithLargeCandleSignal = input.bool(title="Enable High Volume With Large Candle Size Detection", defval=true,
      tooltip="Enable/disable detection and alerts for high volume bars whose candles have larger sizes than the last 20 to 30 candles", group = "Activation Switches")
enableUnusualVolumeSpikeSignal = input.bool(title="Enable Special / Unusual Volume Spike Filter", defval=true,
      tooltip="Send Signal when Volume crosses this unusually high Volume Threshold", group = "Activation Switches")

// Signal 1: New Highest Volume Detection Settings
newHighestVolumeLookbackPeriod = input.int(title="Highest Volume Lookback Period", defval=100, minval=1,
      tooltip="How many bars to look back for highest volume", group = "Volume High/Low Settings")

// Signal 2: Follow-Up Volume Detection Settings  
followUpVolumeThresholdPercent = input.float(title="Next Bar Volume Threshold (as % of peak)", defval=0.5, minval=0.1, step=0.1,
      tooltip="Minimum threshold as percentage of highest volume bar", group = "Volume High/Low Settings")

// Signal 3: High Volume + Large Candle Size Settings
largeCandleVolumeCheckPeriod = input.int(title="Volume Check Lookback Period", defval=100, minval=1,
      tooltip="How many bars to look back for volume calculation", group = "Large Candle Size + High Volume Settings")
largeCandleVolumeCheckMethod = input.string(title="Use Average Volume w Multiplier or Highest Volume or Absolute Volume Threshold For this signal",
      defval="Average_w_Mult", options=["Average_w_Mult", "Highest", "Absolute"], tooltip="This option is used to select whether you want to use the average volume elevated with a multiplier OR the highest volume in the lookback OR an Absolute Numerical Volume Value - as threshold to cross with this bar's volume.", group = "Large Candle Size + High Volume Settings")
largeCandleVolumeAbsoluteThreshold = input.int(title="Absolute Volume Threshold", defval=100, minval=0,
      tooltip="Minimum absolute volume number (only used when Filter Method = 'Absolute')", group = "Large Candle Size + High Volume Settings")
largeCandleVolumeMultiplier = input.float(title="Average Volume Threshold Multiplier", defval=2.0, minval=1.0, step=0.1,
      tooltip="A multiplier for setting the volume threshold", group = "Large Candle Size + High Volume Settings")
largeCandleBodyLookbackPeriod = input.int(title="Candle Size Lookback Period", defval=100, minval=1,
      tooltip="How many bars to look back for average candle size calculation", group = "Large Candle Size + High Volume Settings")
largeCandleCheckMethod = input.string(title = "Use Average Candle Size w Threshold Multiplier or Absolute Candle Size",
      defval = "Average_w_Mult", options = ["Average_w_Mult", "Absolute"], tooltip = "This option is used to specify if you want to use the Average Candle size in the lookback elevated with a multiplier OR an absolute candle size - as a threshold for the current candle's size to cross and generate an alert.", group = "Large Candle Size + High Volume Settings")
largeCandleBodyAbsoluteValue = input.int(title = "The Absolute Candle Size (Open - Close) To Compare with Current (in pips)",
      defval = 1, minval=0, step=1, tooltip = "This is the absolute candle size (in Pips) which you will compare the current candle size math.abs(open-close) to, should you select the option for absolute value comparison.", group = "Large Candle Size + High Volume Settings")
largeCandleBodyMultiplier = input.float(title="Average Candle Size Threshold Multiplier", defval=1.2, minval=1.0, step=0.1,
      tooltip="A multiplier for setting the candle size threshold against which the candle size of the high volume candle is to be compared", group = "Large Candle Size + High Volume Settings")

// Signal 4: Unusual Volume Spike Filter Settings
unusualSpikeFilterMethod = input.string(title=" Special / Unusual Volume Spike Filter Reference Method", defval="Average",
      options=["Average", "Absolute"], tooltip="Use average volume or absolute number as reference", group = "Unusual Volume Spike Filter Settings")
unusualSpikeAvgVolumeMethod = input.string(title="Special / Unusual Volume Spike Filter Average Volume Method", defval="SMA",
      options=["SMA", "EMA", "VWMA"], tooltip="Method to calculate average volume", group = "Unusual Volume Spike Filter Settings")
unusualSpikePeriod = input.int(title="Filter Period for Average Method", defval=50, minval=1, tooltip="Period for calculating filter average volume", group = "Unusual Volume Spike Filter Settings")
unusualSpikeMultiplier = input.float(title=" Special / Unusual Spike Filter Average Volume Multiplier", defval=5.0, minval=0.1,
      step=0.1, tooltip="Minimum volume as multiplier of average (e.g., 5.0 = 500% of average)", group = "Unusual Volume Spike Filter Settings")
unusualSpikeAbsoluteThreshold = input.int(title="Absolute Volume Threshold", defval=100, minval=0,
      tooltip="Minimum absolute volume number (only used when Filter Method = 'Absolute')", group = "Unusual Volume Spike Filter Settings")

// =============================================================================
// PIP CONVERSION FUNCTIONS
// =============================================================================

// Get pip size for current instrument
getPipSize() =>
    float pip_size = na
    
    // Determine asset type and set pip size accordingly
    if syminfo.type == "forex"
        // Forex pairs
        if str.contains(syminfo.currency, "JPY") or str.contains(syminfo.basecurrency, "JPY")
            // JPY pairs: 1 pip = 0.01
            pip_size := 0.01
        else
            // Most other forex pairs: 1 pip = 0.0001
            pip_size := 0.0001
   
    else if syminfo.type == "crypto"
        // Crypto: Use adaptive approach based on price level and mintick
        current_price = close
        if current_price >= 10000
            // High-value crypto (like BTC): 1 pip = 1.0
            pip_size := 1.0
        else if current_price >= 1000
            // Medium-value crypto: 1 pip = 0.1
            pip_size := 0.1
        else if current_price >= 100
            // Lower-value crypto: 1 pip = 0.01
            pip_size := 0.01
        else if current_price >= 1
            // Very low-value crypto: 1 pip = 0.001
            pip_size := 0.001
        else
            // Micro-value crypto: Use 10x mintick as pip
            pip_size := syminfo.mintick * 10
    
    else if syminfo.type == "index" or syminfo.type == "cfd"
        // Indices and CFDs: Use mintick-based approach
        if syminfo.mintick >= 1.0
            // Large tick indices (like Nikkei): 1 pip = mintick
            pip_size := syminfo.mintick
        else if syminfo.mintick >= 0.1
            // Medium tick indices: 1 pip = mintick * 10
            pip_size := syminfo.mintick * 10
        else
            // Small tick indices: 1 pip = mintick * 100
            pip_size := syminfo.mintick * 100
    
    else if syminfo.type == "stock"
        // Stocks: Usually 1 pip = 0.01 (1 cent)
        pip_size := math.max(0.01, syminfo.mintick)
    
    else
        // Commodities and others: Adaptive approach
        if syminfo.mintick >= 1.0
            // Large tick commodities (like crude oil): 1 pip = mintick
            pip_size := syminfo.mintick
        else if syminfo.mintick >= 0.1
            // Medium tick: 1 pip = mintick * 10
            pip_size := syminfo.mintick * 10
        else if syminfo.mintick >= 0.01
            // Small tick: 1 pip = mintick * 100
            pip_size := syminfo.mintick * 100
        else
            // Very small tick: 1 pip = mintick * 1000
            pip_size := syminfo.mintick * 1000
    
    pip_size

// Convert pips to price points
pipsToPrice(pips) =>
    pip_size = getPipSize()
    pips * pip_size

// Convert price points to pips
priceToPips(price_diff) =>
    pip_size = getPipSize()
    price_diff / pip_size

// Get detailed instrument information
getInstrumentInfo() =>
    pip_size = getPipSize()
    [syminfo.type, syminfo.basecurrency, syminfo.currency, syminfo.mintick, pip_size, syminfo.pointvalue]
// call this utility information for the table
[instrument_type, instrument_basecurrency, instrument_currency, instrument_mintick, pip_size, instrument_pointvalue] = getInstrumentInfo()

// =============================================================================
// GET VOLUME DATA FROM SELECTED SYMBOL
// =============================================================================

// Get volume data from selected symbol (with anti-repainting measures)
selectedVolume = request.security(selectedSymbol, timeframe.period, volume, lookahead=barmerge.lookahead_off, gaps=barmerge.gaps_off)

// =============================================================================
// SIGNAL 1: NEW HIGHEST VOLUME DETECTION CALCULATIONS
// =============================================================================

// Variables to track highest volume
var float newHighestVolumeTracker = na
var int newHighestVolumeBarIndex = na
var bool isNewHighestVolume = false

// Initialize on first bar or find initial highest volume
if bar_index == 0 or na(newHighestVolumeTracker)
    newHighestVolumeTracker := selectedVolume
    newHighestVolumeBarIndex := bar_index

// Check if current bar has highest volume in lookback period
highestVolumeInLookback = ta.highest(selectedVolume, newHighestVolumeLookbackPeriod)
currentBarIsLargestInLookback = selectedVolume == highestVolumeInLookback

// Update highest volume tracking
if currentBarIsLargestInLookback
    newHighestVolumeTracker := selectedVolume
    newHighestVolumeBarIndex := bar_index
    isNewHighestVolume := true
else
    isNewHighestVolume := false

// =============================================================================
// SIGNAL 2: FOLLOW-UP VOLUME DETECTION CALCULATIONS  
// =============================================================================

// Check if current bar follows the most recent highest volume bar
barsFromHighestVolume = bar_index - newHighestVolumeBarIndex
isFollowUpVolumeBar = barsFromHighestVolume == 1 and selectedVolume >= (followUpVolumeThresholdPercent * newHighestVolumeTracker)

// =============================================================================
// SIGNAL 3: HIGH VOLUME + LARGE CANDLE SIZE CALCULATIONS
// =============================================================================

// Candle body size calculations
currentCandleBodySize = math.abs(close - open)
averageCandleBodySize = ta.sma(currentCandleBodySize, largeCandleBodyLookbackPeriod)
largeCandleBodyThreshold = averageCandleBodySize * largeCandleBodyMultiplier
largeCandleBodySizeComparisonToAverage = largeCandleBodyThreshold <= currentCandleBodySize
largeCandleBodySizeComparisonToAbsolute = pipsToPrice(largeCandleBodyAbsoluteValue) <= currentCandleBodySize

// Fixed switch statement syntax
largeCandleBodySizeComparisonResult = switch largeCandleCheckMethod
    "Average_w_Mult" => largeCandleBodySizeComparisonToAverage
    "Absolute" => largeCandleBodySizeComparisonToAbsolute
    => largeCandleBodySizeComparisonToAverage // default case

// Candle volume calculations
averageCandleVolume = ta.sma(selectedVolume, largeCandleVolumeCheckPeriod)
highestCandleVolume = ta.highest(selectedVolume, largeCandleVolumeCheckPeriod)
largeCandleVolumeThreshold = averageCandleVolume * largeCandleVolumeMultiplier
largeCandleVolumeComparisonToAverage = largeCandleVolumeThreshold <= selectedVolume
largeCandleVolumeComparisonToHighest = highestCandleVolume <= selectedVolume
largeCandleVolumeComparisonToAbsolute = largeCandleVolumeAbsoluteThreshold <= selectedVolume

// Fixed switch statement syntax
largeCandleVolumeComparisonResult = switch largeCandleVolumeCheckMethod
    "Average_w_Mult" => largeCandleVolumeComparisonToAverage
    "Highest" => largeCandleVolumeComparisonToHighest
    "Absolute" => largeCandleVolumeComparisonToAbsolute
    => largeCandleVolumeComparisonToAverage // default case

// =============================================================================
// SIGNAL 4: UNUSUAL VOLUME SPIKE FILTER CALCULATIONS
// =============================================================================

// Calculate filter volume threshold
unusualSpikeAverageVolume = switch unusualSpikeAvgVolumeMethod
    "SMA" => ta.sma(selectedVolume, unusualSpikePeriod)
    "EMA" => ta.ema(selectedVolume, unusualSpikePeriod)
    "VWMA" => ta.vwma(selectedVolume, unusualSpikePeriod)
    => ta.sma(selectedVolume, unusualSpikePeriod) // default fallback

unusualSpikeVolumeThreshold = switch unusualSpikeFilterMethod
    "Average" => unusualSpikeAverageVolume * unusualSpikeMultiplier
    "Absolute" => unusualSpikeAbsoluteThreshold
    => unusualSpikeAverageVolume * unusualSpikeMultiplier // default fallback

// =============================================================================
// SIGNAL CONDITIONS
// =============================================================================

// Define candle type for debug table
isBearishCandle = open > close

// Signal 1: Current volume exceeds all volumes in lookback (new highest)
newHighestVolumeCondition = currentBarIsLargestInLookback and isNewHighestVolume and enableNewHighestVolumeSignal

// Signal 2: Current bar follows highest volume bar and meets threshold
followUpVolumeCondition = isFollowUpVolumeBar and enableFollowUpVolumeSignal

// Signal 3: High volume + large candle body (fixed logic)
highVolumeWithLargeCandleCondition = largeCandleVolumeComparisonResult and largeCandleBodySizeComparisonResult and enableHighVolumeWithLargeCandleSignal

// Signal 4: Current volume breaks specified large minimum value signifying a rare spike in volume
unusualVolumeSpikeCondition = selectedVolume >= unusualSpikeVolumeThreshold and enableUnusualVolumeSpikeSignal

// =============================================================================
// VISUAL INDICATORS
// =============================================================================

// AUTO SIZE:
// Bullish Signal (Above Bar):
plotshape(newHighestVolumeCondition and shapeSizeInput == "auto" and isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.abovebar,
     size=size.auto)

plotshape(followUpVolumeCondition and shapeSizeInput == "auto" and isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.abovebar,
     size=size.auto)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "auto" and isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.abovebar,
     size=size.auto)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "auto" and isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.abovebar,
     size=size.auto)

// Bearish Signal (Below Bar):
plotshape(newHighestVolumeCondition and shapeSizeInput == "auto" and not isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.belowbar,
     size=size.auto)

plotshape(followUpVolumeCondition and shapeSizeInput == "auto" and not isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.belowbar,
     size=size.auto)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "auto" and not isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.belowbar,
     size=size.auto)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "auto" and not isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.belowbar,
     size=size.auto)

// SMALL SIZE:
// Bullish Signal (Above Bar)
plotshape(newHighestVolumeCondition and shapeSizeInput == "small" and isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.abovebar,
     size=size.small)

plotshape(followUpVolumeCondition and shapeSizeInput == "small" and isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.abovebar,
     size=size.small)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "small" and isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.abovebar,
     size=size.small)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "small" and isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.abovebar,
     size=size.small)

// Bearish Signal (Below Bar)
plotshape(newHighestVolumeCondition and shapeSizeInput == "small" and not isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.belowbar,
     size=size.small)

plotshape(followUpVolumeCondition and shapeSizeInput == "small" and not isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.belowbar,
     size=size.small)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "small" and not isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.belowbar,
     size=size.small)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "small" and not isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.belowbar,
     size=size.small)

// NORMAL SIZE:
// Bullish Signal (Above Bar)
plotshape(newHighestVolumeCondition and shapeSizeInput == "normal" and isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.abovebar,
     size=size.normal)

plotshape(followUpVolumeCondition and shapeSizeInput == "normal" and isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.abovebar,
     size=size.normal)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "normal" and isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.abovebar,
     size=size.normal)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "normal" and isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.abovebar,
     size=size.normal)

// Bearish Signal (Below Bar)
plotshape(newHighestVolumeCondition and shapeSizeInput == "normal" and not isBearishCandle, 
     title="New Highest Volume",
     style=shape.circle,
     color=color.orange,
     location=location.belowbar,
     size=size.normal)

plotshape(followUpVolumeCondition and shapeSizeInput == "normal" and not isBearishCandle, 
     title="Follow-up Volume Alert",
     style=shape.circle,
     color=color.fuchsia,
     location=location.belowbar,
     size=size.normal)

plotshape(highVolumeWithLargeCandleCondition and shapeSizeInput == "normal" and not isBearishCandle, 
     title="High Volume + Large Body",
     style=shape.circle,
     color=color.blue,
     location=location.belowbar,
     size=size.normal)

plotshape(unusualVolumeSpikeCondition and shapeSizeInput == "normal" and not isBearishCandle, 
     title="Unusual Volume Spike",
     style=shape.circle,
     color=color.red,
     location=location.belowbar,
     size=size.normal)

// =============================================================================
// ALERTS
// =============================================================================

// Alerts (only trigger when conditions are enabled)
alertcondition(newHighestVolumeCondition, 
     title="New Highest Volume Alert",
     message="New highest volume detected! Current volume: {{plot(selectedVolume)}} exceeds all volumes in {{plot(newHighestVolumeLookbackPeriod)}} bar lookback period on symbol {{selectedSymbol}}")

alertcondition(followUpVolumeCondition,
     title="Volume Follow-Up Alert", 
     message="Follow-up volume detected! Current volume: {{plot(selectedVolume)}} is {{plot(selectedVolume/newHighestVolumeTracker*100)}}% of previous high-volume bar on symbol {{selectedSymbol}} ")

alertcondition(highVolumeWithLargeCandleCondition,
     title="High Volume with Large Candle Size Alert",
     message="High Volume + Large Candle detected! Current volume meets threshold and candle body size: {{plot(currentCandleBodySize)}} meets size criteria on symbol {{selectedSymbol}}")

alertcondition(unusualVolumeSpikeCondition,
     title="Unusual Volume Spike Alert",
     message="Unusual volume spike detected! Current volume: {{plot(selectedVolume)}} is {{plot(selectedVolume/unusualSpikeAverageVolume)}} x the filter average volume on symbol {{selectedSymbol}}")

// =============================================================================
// DEBUGGING TABLE
// =============================================================================

var table debugTable = table.new(position.bottom_right, 2, 13, bgcolor=color.white, border_width=1)

if barstate.islast and enableDebugTable
    table.cell(debugTable, 0, 0, "Selected Symbol:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 0, str.tostring(selectedSymbol), text_color=color.blue, text_size=size.small)
    
    table.cell(debugTable, 0, 1, "Signal 1 Active:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 1, enableNewHighestVolumeSignal ? "YES" : "NO", text_color=enableNewHighestVolumeSignal ? color.green : color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 2, "Signal 2 Active:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 2, enableFollowUpVolumeSignal ? "YES" : "NO", text_color=enableFollowUpVolumeSignal ? color.green : color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 3, "Signal 3 Active:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 3, enableHighVolumeWithLargeCandleSignal ? "YES" : "NO", text_color=enableHighVolumeWithLargeCandleSignal ? color.green : color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 4, "Signal 4 Active:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 4, enableUnusualVolumeSpikeSignal ? "YES" : "NO", text_color=enableUnusualVolumeSpikeSignal ? color.green : color.red, text_size=size.small)
    
    table.cell(debugTable, 0, 5, "Highest Volume:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 5, str.tostring(newHighestVolumeTracker, "#,###"), text_color=color.black, text_size=size.small)
    
    table.cell(debugTable, 0, 6, "Current Volume:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 6, str.tostring(selectedVolume, "#,###"), text_color=color.black, text_size=size.small)
    
    table.cell(debugTable, 0, 7, "Current Body Size:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 7, str.tostring(currentCandleBodySize, "#.####"), text_color=color.black, text_size=size.small)
    
    table.cell(debugTable, 0, 8, "Avg Body Size:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 8, str.tostring(averageCandleBodySize, "#.####"), text_color=color.black, text_size=size.small)
    
    table.cell(debugTable, 0, 9, "Candle Type:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 9, isBearishCandle ? "BULLISH" : "BEARISH", text_color=isBearishCandle ? color.green : color.red, text_size=size.small)

    table.cell(debugTable, 0, 10, "Pip Size:", text_color=color.black, text_size=size.small)
    table.cell(debugTable, 1, 10, str.tostring(pip_size), text_color=color.black, text_size=size.small)