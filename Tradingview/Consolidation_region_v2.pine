//@version=6
indicator("Consolidation with EDSMA", overlay=true)

// ============ EDSMA CALCULATION ============
// Converted from v3, Copyright (c) 2018-present, Alex Orekhov (everget)

edsmaSrc = input.source(close, "EDSMA Source")
edsmaLength = input.int(40, "EDSMA Length", minval=2)
ssfLength = input.int(20, "Super Smoother Filter Length", minval=1)
ssfPoles = input.int(2, "Super Smoother Filter Poles", options=[2, 3])

PI = 2 * math.asin(1)

get2PoleSSF(src, length) =>
    arg = math.sqrt(2) * PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(arg)
    c2 = b1
    c3 = -math.pow(a1, 2)
    c1 = 1 - c2 - c3
    
    var float ssf = na
    ssf := c1 * src + c2 * nz(ssf[1]) + c3 * nz(ssf[2])
    ssf

get3PoleSSF(src, length) =>
    arg = PI / length
    a1 = math.exp(-arg)
    b1 = 2 * a1 * math.cos(1.738 * arg)
    c1 = math.pow(a1, 2)

    coef2 = b1 + c1
    coef3 = -(c1 + b1 * c1)
    coef4 = math.pow(c1, 2)
    coef1 = 1 - coef2 - coef3 - coef4

    var float ssf = na
    ssf := coef1 * src + coef2 * nz(ssf[1]) + coef3 * nz(ssf[2]) + coef4 * nz(ssf[3])
    ssf

zeros = edsmaSrc - nz(edsmaSrc[2])
avgZeros = (zeros + zeros[1]) / 2

// Ehlers Super Smoother Filter 
ssf = ssfPoles == 2 ? get2PoleSSF(avgZeros, ssfLength) : get3PoleSSF(avgZeros, ssfLength)

// Rescale filter in terms of Standard Deviations
stdev = ta.stdev(ssf, edsmaLength)
scaledFilter = stdev != 0 ? ssf / stdev : 0

alpha = 5 * math.abs(scaledFilter) / edsmaLength

var float edsma = na
edsma := alpha * edsmaSrc + (1 - alpha) * nz(edsma[1])

// ============ SLOPE-BASED DYNAMIC COLORING ============

slopePeriod = input.int(34, title='Slope Period', group='Slope Parameters')
slopeInRange = input.int(25, title='Slope Initial Range', group='Slope Parameters')
flat = input.int(17, title='Consolidation when slope below:', group='Slope Parameters')
bull_col = input.color(color.green, 'Bull Color', inline='colors', group='Slope Parameters')
bear_col = input.color(color.red, 'Bear Color', inline='colors', group='Slope Parameters')
conc_col = input.color(color.yellow, 'Consolidation Color', inline='colors', group='Slope Parameters')

// Slope calculation Function
calcslope(_ma, src, slope_period, range_1) =>
    pi = math.atan(1) * 4
    highestHigh = ta.highest(slope_period)
    lowestLow = ta.lowest(slope_period)
    slope_range = range_1 / (highestHigh - lowestLow) * lowestLow
    dt = (_ma[2] - _ma) / src * slope_range
    c = math.sqrt(1 + dt * dt)
    xAngle = math.round(180 * math.acos(1 / c) / pi)
    maAngle = dt > 0 ? -xAngle : xAngle
    maAngle

// MA coloring function
dynColor(_flat, slp, col_1, col_2, col_r) =>
    var col = color.new(na, 0)
    col := slp > _flat ? col_1 : slp <= -_flat ? col_2 : col_r
    col

// Calculate slope of EDSMA
slope = calcslope(edsma, edsmaSrc, slopePeriod, slopeInRange)

// Apply dynamic coloring
edsmaColor = dynColor(flat, slope, bull_col, bear_col, conc_col)

// Plot EDSMA with dynamic coloring
plot(edsma, title="EDSMA", linewidth=2, color=edsmaColor)

// ============ CONSOLIDATION DETECTION ============

// Inputs
useEDSMA = input.bool(true, "Use EDSMA for ATR Bands", group='Consolidation Detection')
altSource = input.source(close, "Alternative Source", group='Consolidation Detection')
length = input.int(20, "ATR Length", group='Consolidation Detection')
mult = input.float(2.0, "ATR Multiplier", group='Consolidation Detection')
threshold = input.int(10, "Min bars for valid consolidation", group='Consolidation Detection')

// Slope Filter Inputs
useSlopeFilter = input.bool(true, "Enable Slope Filter", group='Slope Filter')
maxTrendingBars = input.int(5, "Max Trending Bars Allowed", minval=0, group='Slope Filter',
     tooltip="Maximum number of bars where EDSMA slope indicates trending (NOT flat). If exceeded, the region won't be considered a valid consolidation.")

// Select source for ATR bands
atrSource = useEDSMA ? edsma : altSource

// ATR calculation
atrValue = ta.atr(length)

// Upper / Lower ATR Bands (current values for plotting)
upperBound = atrSource + atrValue * mult
lowerBound = atrSource - atrValue * mult

// VAR VARIABLES TO TRACK ONGOING CONSOLIDATION
var bool in_consolidation = false
var int consol_start_bar = na
var int consol_bar_count = 0
var int consol_trending_count = 0
var float consol_highest_high = na  // Track actual highest high
var float consol_lowest_low = na    // Track actual lowest low
var box current_box = na

// Check if current bar is within its own ATR bounds
bool current_bar_inside = high <= upperBound and low >= lowerBound

// Check if current bar is TRENDING (NOT choppy/yellow)
bool current_bar_trending = slope > flat or slope <= -flat

if in_consolidation
    // WE'RE IN A CONSOLIDATION - CHECK IF IT CONTINUES
    if current_bar_inside
        // Bar is still inside - check slope filter BEFORE extending
        if current_bar_trending
            consol_trending_count += 1
        
        // CHECK SLOPE FILTER CONTINUOUSLY!
        bool slope_still_ok = true
        if useSlopeFilter
            slope_still_ok := consol_trending_count <= maxTrendingBars
        
        if slope_still_ok
            // Slope filter still passed - EXTEND THE CONSOLIDATION
            consol_bar_count += 1
            
            // UPDATE HIGHEST HIGH AND LOWEST LOW
            consol_highest_high := math.max(consol_highest_high, high)
            consol_lowest_low := math.min(consol_lowest_low, low)
            
            // Update the box - extend right and update top/bottom dynamically
            if not na(current_box)
                box.set_right(current_box, bar_index)
                box.set_top(current_box, consol_highest_high)
                box.set_bottom(current_box, consol_lowest_low)
        else
            // SLOPE FILTER VIOLATED - END THE CONSOLIDATION
            in_consolidation := false
            consol_start_bar := na
            consol_bar_count := 0
            consol_trending_count := 0
            consol_highest_high := na
            consol_lowest_low := na
            current_box := na
    else
        // BAR VIOLATED ATR BOUNDS - END THE CONSOLIDATION
        in_consolidation := false
        consol_start_bar := na
        consol_bar_count := 0
        consol_trending_count := 0
        consol_highest_high := na
        consol_lowest_low := na
        current_box := na
else
    // NOT IN CONSOLIDATION - CHECK IF ONE IS STARTING
    if current_bar_inside
        // This bar is inside its own bounds
        if na(consol_start_bar)
            // Start tracking a potential consolidation
            consol_start_bar := bar_index
            consol_bar_count := 1
            consol_trending_count := current_bar_trending ? 1 : 0
            consol_highest_high := high  // Initialize with current bar
            consol_lowest_low := low
        else
            // Continue counting
            consol_bar_count += 1
            if current_bar_trending
                consol_trending_count += 1
            
            // Update high/low during accumulation phase
            consol_highest_high := math.max(consol_highest_high, high)
            consol_lowest_low := math.min(consol_lowest_low, low)
            
            // Check if we've hit the threshold
            if consol_bar_count >= threshold
                // Check slope filter
                bool slope_ok = true
                if useSlopeFilter
                    slope_ok := consol_trending_count <= maxTrendingBars
                
                if slope_ok
                    // START THE CONSOLIDATION BOX with actual high/low!
                    in_consolidation := true
                    current_box := box.new(
                         left = consol_start_bar,
                         top = consol_highest_high,
                         right = bar_index,
                         bottom = consol_lowest_low,
                         border_color = color.blue,
                         bgcolor = color.new(color.blue, 90),
                         border_width = 2)
                else
                    // Slope filter failed - reset
                    consol_start_bar := na
                    consol_bar_count := 0
                    consol_trending_count := 0
                    consol_highest_high := na
                    consol_lowest_low := na
    else
        // Current bar violated - reset tracking
        consol_start_bar := na
        consol_bar_count := 0
        consol_trending_count := 0
        consol_highest_high := na
        consol_lowest_low := na

// Plotting current ATR Bands
plot(upperBound, "Upper ATR Band", color=color.new(color.green, 50), linewidth=1)
plot(lowerBound, "Lower ATR Band", color=color.new(color.red, 50), linewidth=1)